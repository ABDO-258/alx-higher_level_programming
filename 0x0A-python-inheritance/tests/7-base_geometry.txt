test for 7-base_geometry.py

import module

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

::
    >>> tst1 = BaseGeometry()
    >>> type(tst1)
    <class '7-base_geometry.BaseGeometry'>

::
    >>> tst1 = BaseGeometry(None)
    Traceback (most recent call last):
    TypeError: BaseGeometry() takes no arguments

::

area

    >>> tst2 = BaseGeometry()
    >>> tst2.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

integer_validator
::non arguments::

    >>> tst3 = BaseGeometry()
    >>> tst3.integer_validator()
    Traceback (most recent call last):
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

    
::valid value integer::

    >>> tst3 = BaseGeometry()
    >>> tst3.integer_validator("str", 13)

::not int::

    >>> tst3.integer_validator("str", "text")
    Traceback (most recent call last):
    TypeError: str must be an integer

    >>> tst3.integer_validator("str", 5.6)
    Traceback (most recent call last):
    TypeError: str must be an integer

    >>> tst3.integer_validator("str", (5,6))
    Traceback (most recent call last):
    TypeError: str must be an integer

    >>> tst3.integer_validator("str", [6,4])
    Traceback (most recent call last):
    TypeError: str must be an integer

    >>> tst3.integer_validator("test", {'key':305})
    Traceback (most recent call last):
    TypeError: test must be an integer

:: valid int but value < 0::

    >>> tst3.integer_validator("test", -5)
    Traceback (most recent call last):
    ValueError: test must be greater than 0

    >>> tst3.integer_validator("test", 0)
    Traceback (most recent call last):
    ValueError: test must be greater than 0

    >>> tst4 = BaseGeometry()
    >>> tst4.integer_validator(55, 13)